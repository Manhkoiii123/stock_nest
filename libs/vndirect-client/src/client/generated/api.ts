/* tslint:disable */
/* eslint-disable */
/**
 * VNDIRECT Stocks API
 * API for retrieving stock information from VNDIRECT
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface GetChartHistory200Response
 */
export interface GetChartHistory200Response {
    /**
     * List of timestamps (Unix time)
     * @type {Array<number>}
     * @memberof GetChartHistory200Response
     */
    't'?: Array<number>;
    /**
     * Closing prices
     * @type {Array<number>}
     * @memberof GetChartHistory200Response
     */
    'c'?: Array<number>;
    /**
     * Opening prices
     * @type {Array<number>}
     * @memberof GetChartHistory200Response
     */
    'o'?: Array<number>;
    /**
     * High prices
     * @type {Array<number>}
     * @memberof GetChartHistory200Response
     */
    'h'?: Array<number>;
    /**
     * Low prices
     * @type {Array<number>}
     * @memberof GetChartHistory200Response
     */
    'l'?: Array<number>;
    /**
     * Volume data
     * @type {Array<number>}
     * @memberof GetChartHistory200Response
     */
    'v'?: Array<number>;
    /**
     * Status of the response
     * @type {string}
     * @memberof GetChartHistory200Response
     */
    's'?: string;
}
/**
 * 
 * @export
 * @interface GetNews200Response
 */
export interface GetNews200Response {
    /**
     * 
     * @type {number}
     * @memberof GetNews200Response
     */
    'currentPage'?: number;
    /**
     * 
     * @type {Array<GetNews200ResponseDataInner>}
     * @memberof GetNews200Response
     */
    'data'?: Array<GetNews200ResponseDataInner>;
    /**
     * 
     * @type {number}
     * @memberof GetNews200Response
     */
    'size'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetNews200Response
     */
    'totalElements'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetNews200Response
     */
    'totalPages'?: number;
}
/**
 * 
 * @export
 * @interface GetNews200ResponseDataInner
 */
export interface GetNews200ResponseDataInner {
    /**
     * 
     * @type {string}
     * @memberof GetNews200ResponseDataInner
     */
    'dstockUrl'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetNews200ResponseDataInner
     */
    'hotNews'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetNews200ResponseDataInner
     */
    'locale'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetNews200ResponseDataInner
     */
    'newsAbstract'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetNews200ResponseDataInner
     */
    'newsContent'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetNews200ResponseDataInner
     */
    'newsDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetNews200ResponseDataInner
     */
    'newsGroup'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetNews200ResponseDataInner
     */
    'newsId'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetNews200ResponseDataInner
     */
    'newsSource'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetNews200ResponseDataInner
     */
    'newsTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetNews200ResponseDataInner
     */
    'newsTitle'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetNews200ResponseDataInner
     */
    'newsType'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetNews200ResponseDataInner
     */
    'newsUrl'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetNews200ResponseDataInner
     */
    'tagCodes'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetNews200ResponseDataInner
     */
    'thumbnailUrl'?: string;
}
/**
 * 
 * @export
 * @interface GetStocks200Response
 */
export interface GetStocks200Response {
    /**
     * 
     * @type {number}
     * @memberof GetStocks200Response
     */
    'currentPage'?: number;
    /**
     * 
     * @type {Array<GetStocks200ResponseDataInner>}
     * @memberof GetStocks200Response
     */
    'data'?: Array<GetStocks200ResponseDataInner>;
    /**
     * 
     * @type {number}
     * @memberof GetStocks200Response
     */
    'size'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetStocks200Response
     */
    'totalElements'?: number;
    /**
     * 
     * @type {number}
     * @memberof GetStocks200Response
     */
    'totalPages'?: number;
}
/**
 * 
 * @export
 * @interface GetStocks200ResponseDataInner
 */
export interface GetStocks200ResponseDataInner {
    /**
     * 
     * @type {string}
     * @memberof GetStocks200ResponseDataInner
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetStocks200ResponseDataInner
     */
    'companyId'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetStocks200ResponseDataInner
     */
    'companyName'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetStocks200ResponseDataInner
     */
    'companyNameEng'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetStocks200ResponseDataInner
     */
    'delistedDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetStocks200ResponseDataInner
     */
    'floor'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetStocks200ResponseDataInner
     */
    'listedDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetStocks200ResponseDataInner
     */
    'shortName'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetStocks200ResponseDataInner
     */
    'status'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetStocks200ResponseDataInner
     */
    'type'?: string;
}

/**
 * ChartApi - axios parameter creator
 * @export
 */
export const ChartApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get historical stock chart data
         * @param {string} resolution Time resolution (e.g., 1D, 1W, 1)
         * @param {string} symbol Stock symbol (e.g., CSC)
         * @param {number} [from] Start timestamp (Unix time)
         * @param {number} [to] End timestamp (Unix time)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChartHistory: async (resolution: string, symbol: string, from?: number, to?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'resolution' is not null or undefined
            assertParamExists('getChartHistory', 'resolution', resolution)
            // verify required parameter 'symbol' is not null or undefined
            assertParamExists('getChartHistory', 'symbol', symbol)
            const localVarPath = `/dchart/history`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (resolution !== undefined) {
                localVarQueryParameter['resolution'] = resolution;
            }

            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }

            if (from !== undefined) {
                localVarQueryParameter['from'] = from;
            }

            if (to !== undefined) {
                localVarQueryParameter['to'] = to;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ChartApi - functional programming interface
 * @export
 */
export const ChartApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ChartApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get historical stock chart data
         * @param {string} resolution Time resolution (e.g., 1D, 1W, 1)
         * @param {string} symbol Stock symbol (e.g., CSC)
         * @param {number} [from] Start timestamp (Unix time)
         * @param {number} [to] End timestamp (Unix time)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getChartHistory(resolution: string, symbol: string, from?: number, to?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetChartHistory200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getChartHistory(resolution, symbol, from, to, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ChartApi.getChartHistory']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ChartApi - factory interface
 * @export
 */
export const ChartApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ChartApiFp(configuration)
    return {
        /**
         * 
         * @summary Get historical stock chart data
         * @param {ChartApiGetChartHistoryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChartHistory(requestParameters: ChartApiGetChartHistoryRequest, options?: RawAxiosRequestConfig): AxiosPromise<GetChartHistory200Response> {
            return localVarFp.getChartHistory(requestParameters.resolution, requestParameters.symbol, requestParameters.from, requestParameters.to, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getChartHistory operation in ChartApi.
 * @export
 * @interface ChartApiGetChartHistoryRequest
 */
export interface ChartApiGetChartHistoryRequest {
    /**
     * Time resolution (e.g., 1D, 1W, 1)
     * @type {string}
     * @memberof ChartApiGetChartHistory
     */
    readonly resolution: string

    /**
     * Stock symbol (e.g., CSC)
     * @type {string}
     * @memberof ChartApiGetChartHistory
     */
    readonly symbol: string

    /**
     * Start timestamp (Unix time)
     * @type {number}
     * @memberof ChartApiGetChartHistory
     */
    readonly from?: number

    /**
     * End timestamp (Unix time)
     * @type {number}
     * @memberof ChartApiGetChartHistory
     */
    readonly to?: number
}

/**
 * ChartApi - object-oriented interface
 * @export
 * @class ChartApi
 * @extends {BaseAPI}
 */
export class ChartApi extends BaseAPI {
    /**
     * 
     * @summary Get historical stock chart data
     * @param {ChartApiGetChartHistoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChartApi
     */
    public getChartHistory(requestParameters: ChartApiGetChartHistoryRequest, options?: RawAxiosRequestConfig) {
        return ChartApiFp(this.configuration).getChartHistory(requestParameters.resolution, requestParameters.symbol, requestParameters.from, requestParameters.to, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * NewsApi - axios parameter creator
 * @export
 */
export const NewsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get filtered news list
         * @param {string} q Filter query for news, e.g., &#x60;newsSource:VNECONOMY,TAPCHICONGTHUONG~newsType:banking_finance_news,stock_news,company_news&#x60;
         * @param {string} [sort] Sort field, e.g., &#x60;newsDate:desc~newsTime:desc&#x60;
         * @param {number} [size] Number of results per page
         * @param {number} [page] Page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNews: async (q: string, sort?: string, size?: number, page?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'q' is not null or undefined
            assertParamExists('getNews', 'q', q)
            const localVarPath = `/v4/news`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NewsApi - functional programming interface
 * @export
 */
export const NewsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = NewsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get filtered news list
         * @param {string} q Filter query for news, e.g., &#x60;newsSource:VNECONOMY,TAPCHICONGTHUONG~newsType:banking_finance_news,stock_news,company_news&#x60;
         * @param {string} [sort] Sort field, e.g., &#x60;newsDate:desc~newsTime:desc&#x60;
         * @param {number} [size] Number of results per page
         * @param {number} [page] Page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNews(q: string, sort?: string, size?: number, page?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetNews200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getNews(q, sort, size, page, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NewsApi.getNews']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * NewsApi - factory interface
 * @export
 */
export const NewsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = NewsApiFp(configuration)
    return {
        /**
         * 
         * @summary Get filtered news list
         * @param {NewsApiGetNewsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNews(requestParameters: NewsApiGetNewsRequest, options?: RawAxiosRequestConfig): AxiosPromise<GetNews200Response> {
            return localVarFp.getNews(requestParameters.q, requestParameters.sort, requestParameters.size, requestParameters.page, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getNews operation in NewsApi.
 * @export
 * @interface NewsApiGetNewsRequest
 */
export interface NewsApiGetNewsRequest {
    /**
     * Filter query for news, e.g., &#x60;newsSource:VNECONOMY,TAPCHICONGTHUONG~newsType:banking_finance_news,stock_news,company_news&#x60;
     * @type {string}
     * @memberof NewsApiGetNews
     */
    readonly q: string

    /**
     * Sort field, e.g., &#x60;newsDate:desc~newsTime:desc&#x60;
     * @type {string}
     * @memberof NewsApiGetNews
     */
    readonly sort?: string

    /**
     * Number of results per page
     * @type {number}
     * @memberof NewsApiGetNews
     */
    readonly size?: number

    /**
     * Page number
     * @type {number}
     * @memberof NewsApiGetNews
     */
    readonly page?: number
}

/**
 * NewsApi - object-oriented interface
 * @export
 * @class NewsApi
 * @extends {BaseAPI}
 */
export class NewsApi extends BaseAPI {
    /**
     * 
     * @summary Get filtered news list
     * @param {NewsApiGetNewsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NewsApi
     */
    public getNews(requestParameters: NewsApiGetNewsRequest, options?: RawAxiosRequestConfig) {
        return NewsApiFp(this.configuration).getNews(requestParameters.q, requestParameters.sort, requestParameters.size, requestParameters.page, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * StockApi - axios parameter creator
 * @export
 */
export const StockApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get list of stocks
         * @param {string} [q] Filter string using &#x60;key:value&#x60; pairs joined by &#x60;~&#x60;. Example: &#x60;status:LISTED~type:STOCK&#x60; filters stocks that are listed and of type STOCK. 
         * @param {number} [size] Number of records to return (max size is server-defined)
         * @param {number} [page] Page number (starting from 1)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStocks: async (q?: string, size?: number, page?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v4/stocks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StockApi - functional programming interface
 * @export
 */
export const StockApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StockApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get list of stocks
         * @param {string} [q] Filter string using &#x60;key:value&#x60; pairs joined by &#x60;~&#x60;. Example: &#x60;status:LISTED~type:STOCK&#x60; filters stocks that are listed and of type STOCK. 
         * @param {number} [size] Number of records to return (max size is server-defined)
         * @param {number} [page] Page number (starting from 1)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStocks(q?: string, size?: number, page?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetStocks200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStocks(q, size, page, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StockApi.getStocks']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * StockApi - factory interface
 * @export
 */
export const StockApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StockApiFp(configuration)
    return {
        /**
         * 
         * @summary Get list of stocks
         * @param {StockApiGetStocksRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStocks(requestParameters: StockApiGetStocksRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<GetStocks200Response> {
            return localVarFp.getStocks(requestParameters.q, requestParameters.size, requestParameters.page, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getStocks operation in StockApi.
 * @export
 * @interface StockApiGetStocksRequest
 */
export interface StockApiGetStocksRequest {
    /**
     * Filter string using &#x60;key:value&#x60; pairs joined by &#x60;~&#x60;. Example: &#x60;status:LISTED~type:STOCK&#x60; filters stocks that are listed and of type STOCK. 
     * @type {string}
     * @memberof StockApiGetStocks
     */
    readonly q?: string

    /**
     * Number of records to return (max size is server-defined)
     * @type {number}
     * @memberof StockApiGetStocks
     */
    readonly size?: number

    /**
     * Page number (starting from 1)
     * @type {number}
     * @memberof StockApiGetStocks
     */
    readonly page?: number
}

/**
 * StockApi - object-oriented interface
 * @export
 * @class StockApi
 * @extends {BaseAPI}
 */
export class StockApi extends BaseAPI {
    /**
     * 
     * @summary Get list of stocks
     * @param {StockApiGetStocksRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StockApi
     */
    public getStocks(requestParameters: StockApiGetStocksRequest = {}, options?: RawAxiosRequestConfig) {
        return StockApiFp(this.configuration).getStocks(requestParameters.q, requestParameters.size, requestParameters.page, options).then((request) => request(this.axios, this.basePath));
    }
}



